#!/bin/bash
# DKMS pre_build script for bcachefs
# Conditionally include dependency modules with manual indexing

# I expect this script to decrease in size and eventually not
# be needed as bcachefs dkms source development rapidly continues.

set -e  # Exit on error

# Triple fallback: ${kernelver} (from DKMS) -> $1 (manual) -> $(uname -r) (current kernel)
KERNEL_VERSION="${kernelver:-${1:-$(uname -r)}}"
echo "Building for kernel version: ${KERNEL_VERSION}"

# Comprehensive kernel config search
KERNEL_CONFIG=""
for config_path in \
    "/boot/config-${KERNEL_VERSION}" \
    "/lib/modules/${KERNEL_VERSION}/build/.config" \
    "/usr/src/linux-${KERNEL_VERSION}/.config" \
    "/proc/config.gz" \
    "/boot/config"; do

    if [[ -f "$config_path" ]] && [[ -r "$config_path" ]]; then
        KERNEL_CONFIG="$config_path"
        echo "Found kernel config: ${KERNEL_CONFIG}"
        break
    fi
done

if [[ -z "$KERNEL_CONFIG" ]]; then
    echo "Warning: Cannot find readable kernel config for ${KERNEL_VERSION}" >&2
    echo "Will build all modules (fallback mode)" >&2
    KERNEL_CONFIG="BUILD_ALL"
fi

# Function to check if config is built-in (=y)
is_builtin() {
    local config_name="$1"

    # Fallback mode: pretend nothing is built-in so we build everything
    if [[ "$KERNEL_CONFIG" == "BUILD_ALL" ]]; then
        return 1  # false - nothing is built-in
    fi

    if [[ "$KERNEL_CONFIG" == *.gz ]]; then
        zcat "$KERNEL_CONFIG" | grep -q "^${config_name}=y$"
    else
        grep -q "^${config_name}=y$" "$KERNEL_CONFIG"
    fi
}

# Write build configuration to a file for Makefile
echo "# Auto-generated by pre_build.sh" > build_config.mk

if ! is_builtin "CONFIG_MIN_HEAP"; then
    echo "Building real min_heap module"
    echo "BUILD_MIN_HEAP_REAL := 1" >> build_config.mk
else
    echo "Building dummy min_heap module"
    echo "BUILD_MIN_HEAP_REAL := 0" >> build_config.mk
fi

# CONFIG_CLOSURE check removed as it is now included in
# bcachefs-tools v1.31.2 under src/vendor

# Write a build configuration for post build shell scripts
sed 's/ := /=/g' build_config.mk > build_config.sh
[ -n "$arch" ] && echo "arch_ko=\"$arch\"" >> build_config.sh
[ -n "$module_version" ] && echo "module_version=\"$module_version\"" >> build_config.sh
[ -n "$kernelver" ] && echo "kernelver=\"$kernelver\"" >> build_config.sh

echo "DKMS configuration completed successfully"
