Godot Engine â€“ Multi-platform 2D and 3D game engine

2D and 3D cross-platform game engine
    Godot Engine is a feature-packed, cross-platform game engine to
create 2D and 3D games from a unified interface. It provides a
comprehensive set of common tools, so that users can focus on making
games without having to reinvent the wheel. Games can be exported with
one click to a number of platforms, including the major desktop
platforms (Linux, macOS, Windows), mobile platforms (Android, iOS), as
well as Web-based platforms and consoles.

Free, open source and community-driven
    Godot is completely free and open source under the very permissive
MIT license. No strings attached, no royalties, nothing. The users'
games are theirs, down to the last line of engine code. Godot's
development is fully independent and community-driven, empowering users
to help shape their engine to match their expectations. It is supported
by the Godot Foundation not-for-profit.
    Before being open sourced in February 2014, Godot had been developed
by Juan Linietsky and Ariel Manzur (both still maintaining the project)
for several years as an in-house engine, used to publish several
work-for-hire titles.

Community and contributing
    Godot is not only an engine but an ever-growing community of users
and engine developers. The main community channels are listed on the
homepage.
    The best way to get in touch with the core engine developers is to
join the Godot Contributors Chat.
    To get started contributing to the project, see the contributing
guide. This document also includes guidelines for reporting bugs.

Documentation and demos
    The official documentation is hosted on Read the Docs. It is
maintained by the Godot community in its own GitHub repository.
    The class reference is also accessible from the Godot editor.
    We also maintain official demos in their own GitHub repository as
well as a list of awesome Godot community resources.
    There are also a number of other learning resources provided by the
community, such as text and video tutorials, demos, etc. Consult the
community channels for more information.

By default, the scons build system will probe your system and use all
available cores less one. To get around this, you may set the number of
jobs in the MAKEFLAGS variable.
