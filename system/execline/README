execline is a (non-interactive) scripting language, like sh; but its
syntax is quite different from a traditional shell syntax. The execlineb
program is meant to be used as an interpreter for a text file; the other
commands are essentially useful inside an execlineb script.

execline is as powerful as a shell: it features conditional loops,
getopt-style option handling, filename globbing, and more. Meanwhile,
its syntax is far more logical and predictable than the shell's syntax,
and has no security issues.

NOTE:
Upstream recommends building skarnet.org software with static libraries,
as most of skarnet.org software are small enough that shared libraries
are generally not worth using. Therefore, by default, shared libraries
are not built and binaries are linked against the static versions of the
skarnet.org libraries.

If you want to also build the shared libraries, pass BUILD_SHARED=yes
environment variable to this SlackBuild script like below:

    BUILD_SHARED=yes ./execline.SlackBuild

Similarly, to avoid building the static libraries, you can pass
BUILD_STATIC=no to the script. For example, to only build the shared
libraries and not the static ones, you can do something like:

    BUILD_SHARED=yes BUILD_STATIC=no ./execline.SlackBuild

If you just want to build and use skarnet.org software, building only
the static libraries should be sufficient.

If you want the binaries to be linked against the shared versions of the
skarnet.org libraries, pass LINK_SHARED=yes to the script, i.e.,

    LINK_SHARED=yes ./execline.SlackBuild
