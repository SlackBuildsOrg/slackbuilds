#!/bin/bash

# Slackware build script for lua-language-server

# Copyright 2022 xaizek <xaizek@posteo.net>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=lua-language-server
VERSION=${VERSION:-3.13.2}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
mkdir $PRGNAM-$VERSION
cd $PRGNAM-$VERSION
unzip $CWD/$PRGNAM-$VERSION-submodules.zip
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

cd 3rd/luamake
# don't use compile/install.sh, it updates shell configuration file
# suppress running tests (some of them fail with `unshare -n`)
compile/build.sh notest
cd ../..
3rd/luamake/luamake rebuild

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/usr/bin
# the project seems to be developed on Windows where it's customary to store
# application's data next to the binary by default, but that won't work on Linux
echo '#!/bin/sh' > $PKG/usr/bin/lua-language-server
echo 'exec "/usr/libexec/lua-language-server/bin/lua-language-server" \
           --logpath="/tmp/runtime-$USER/lua-language-server/log" \
           --metapath="/tmp/runtime-$USER/lua-language-server/meta" \
           "$@"' \
     >> $PKG/usr/bin/lua-language-server
chmod 755 $PKG/usr/bin/lua-language-server

# this isn't a binary package, so using libexec instead of /opt
mkdir -p "$PKG/usr/libexec/lua-language-server"
cp -r bin/ locale/ meta/ script/ debugger.lua main.lua \
      "$PKG/usr/libexec/lua-language-server"

# empty directories come from source package and build process, their names are
# hashes which are generated for FFI meta; see no easy way to prevent their
# creation while keeping tests, so just remove empty directories in here
for dir in "$PKG/usr/libexec/lua-language-server/meta/"*; do
    if [ -z "$(ls -A "$dir")" ]; then
        rmdir "$dir"
    fi
done

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a \
  LICENSE changelog.md \
  $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
