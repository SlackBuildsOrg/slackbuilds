#!/bin/bash

# Slackware build script for nim

# Copyright 2024 by Nick Smallbone <nick@smallbone.se>
# Copyright 2022 by Ruben Schuller <sb@rbn.im>
# Maintained 2020-2021 by Benjamin Trigona-Harany <slackbuilds@jaxartes.net>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=nim
VERSION=${VERSION:-2.2.0}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "aarch64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.xz
cd $PRGNAM-$VERSION
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

patch -p1 < $CWD/remove-missing-documentation.patch
patch -p1 < $CWD/fix-lib-path.patch
patch -p1 < $CWD/fix-nim-gdb-path.patch
./build.sh --extraBuildArgs "$SLKCFLAGS"
bin/nim c -d:release koch
./koch boot -d:release

# Build extra tools, and documentation
./koch toolsNoExternal -d:release
./koch nimble -d:release
bin/nim c -d:release tools/niminst/niminst
# use --docCmd:skip to skip runnable examples because some require network access
./koch --localdocs doc -d:release --docCmd:skip

DESTDIR=$PKG ./install.sh /usr/bin

# Install extra binaries
for fn in nim-gdb nimble nimgrep nimpretty nimsuggest testament; do cp bin/$fn $PKG/usr/bin/; done
cp tools/niminst/niminst $PKG/usr/bin/

# Install miscellaneous stuff according to doc/packaging.md
mkdir -p $PKG/usr/lib/nim/tools/dochack $PKG/usr/lib/nim/doc
cp doc/nimdoc.css doc/nimdoc.cls $PKG/usr/lib/nim/doc/
cp tools/dochack/dochack.js $PKG/usr/lib/nim/tools/dochack/
cp tools/debug/nim-gdb.py $PKG/usr/lib/nim/tools/

# Install the compiler and dependencies
cp -r compiler $PKG/usr/lib/nim/lib
cp nim.nimble $PKG/usr/lib/nim/lib/compiler
mkdir -p $PKG/usr/lib/nim/lib/dist
cp -r dist/checksums $PKG/usr/lib/nim/lib/dist

# Install completions
mkdir -p $PKG/usr/share/bash-completion/completions \
    $PKG/usr/share/zsh/site-functions
for i in tools/nim dist/nimble/nimble; do
    cp $i.bash-completion $PKG/usr/share/bash-completion/completions/$(basename $i)
    cp $i.zsh-completion $PKG/usr/share/zsh/site-functions/_$(basename $i)
done

# Use .new for configuration files
for i in config.nims nim.cfg nimdoc.cfg nimdoc.tex.cfg rename.rules.cfg; do
    mv $PKG/etc/nim/$i $PKG/etc/nim/$i.new
done
find $PKG -depth -type d -empty -delete # remove needless empty dirs

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | \
  grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a \
  copying.txt doc/html changelogs \
  $PKG/usr/doc/$PRGNAM-$VERSION
cp -a \
  dist/nimble/nimble-guide/docs \
  $PKG/usr/doc/$PRGNAM-$VERSION/nimble
rm $PKG/usr/doc/$PRGNAM-$VERSION/changelogs/readme.md
rm $PKG/usr/doc/$PRGNAM-$VERSION/changelogs/changelog_X_XX_X.md
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
