#!/bin/bash

# Slackware build script for system76-power

# Copyright 2019-2021 Erich Ritz, Scottsdale, Arizona, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=system76-power
VERSION=${VERSION:-1.1.16}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac

  if [ "$ARCH" = "i586" ]; then
    if rustc -Vv | grep host | grep i686 > /dev/null ; then
      ARCH=i686
    fi
  fi
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
if [ -e $CWD/$VERSION.tar.gz ]; then
  tar xvf $CWD/$VERSION.tar.gz
else
  tar xvf $CWD/$PRGNAM-$VERSION.tar.gz
fi
cd $PRGNAM-$VERSION

# build offline
# configuration tells cargo to use the configured directory
# for dependencies intead of downloading from crates.io
mkdir .cargo
cat << EOF >> .cargo/config
[source.crates-io]
replace-with = "vendored-sources"

[source."https://github.com/pop-os/sysfs-class"]
git = "https://github.com/pop-os/sysfs-class"
branch = "master"
replace-with = "vendored-sources"

[source.vendored-sources]
directory = "$(pwd)/vendor"
EOF

mkdir vendor
# deps and versions come from Cargo.lock
(
  cd vendor

  for dependency in \
      ansi_term=0.11.0 \
      atty=0.2.14 \
      bitflags=1.2.1 \
      bytes=0.5.6 \
      cc=1.0.67 \
      cfg-if=0.1.10 \
      cfg-if=1.0.0 \
      clap=2.33.3 \
      dbus=0.9.2 \
      dbus-crossroads=0.3.0 \
      dbus-tokio=0.6.0 \
      err-derive=0.2.4 \
      fern=0.6.0 \
      fuchsia-zircon=0.3.3 \
      fuchsia-zircon-sys=0.3.3 \
      futures-channel=0.3.12 \
      futures-core=0.3.12 \
      futures-io=0.3.12 \
      futures-macro=0.3.12 \
      futures-task=0.3.12 \
      futures-util=0.3.12 \
      hermit-abi=0.1.18 \
      hidapi=1.2.5 \
      inotify=0.8.3 \
      inotify-sys=0.1.5 \
      intel-pstate=0.2.1 \
      iovec=0.1.4 \
      itoa=0.4.7 \
      kernel32-sys=0.2.2 \
      lazy_static=1.4.0 \
      libc=0.2.86 \
      libdbus-sys=0.2.1 \
      log=0.4.14 \
      memchr=2.3.4 \
      mio=0.6.23 \
      mio-uds=0.6.8 \
      miow=0.2.2 \
      net2=0.2.37 \
      num_cpus=1.13.0 \
      numtoa=0.2.3 \
      once_cell=1.6.0 \
      pin-project-lite=0.1.11 \
      pin-project-lite=0.2.4 \
      pin-utils=0.1.0 \
      pkg-config=0.3.19 \
      proc-macro-error=1.0.4 \
      proc-macro-error-attr=1.0.4 \
      proc-macro-hack=0.5.19 \
      proc-macro-nested=0.1.7 \
      proc-macro2=1.0.24 \
      quote=1.0.9 \
      rustversion=1.0.4 \
      ryu=1.0.5 \
      serde=1.0.123 \
      serde_derive=1.0.123 \
      serde_json=1.0.62 \
      signal-hook-registry=1.3.0 \
      slab=0.4.2 \
      smart-default=0.6.0 \
      strsim=0.8.0 \
      syn=1.0.60 \
      synstructure=0.12.4 \
      sysfs-class=0.1.3 \
      textwrap=0.11.0 \
      tokio=0.2.25 \
      tokio-macros=0.2.6 \
      unicode-width=0.1.8 \
      unicode-xid=0.2.1 \
      vec_map=0.8.2 \
      version_check=0.9.2 \
      winapi=0.2.8 \
      winapi=0.3.9 \
      winapi-build=0.1.1 \
      winapi-i686-pc-windows-gnu=0.4.0 \
      winapi-x86_64-pc-windows-gnu=0.4.0 \
      ws2_32-sys=0.2.1; do

    dep="$(echo "$dependency" | cut -d= -f1)"
    ver="$(echo "$dependency" | cut -d= -f2)"

    if [ -e $CWD/$dep-$ver.crate ]; then
        CRATE_FILE=$CWD/$dep-$ver.crate
    else
        if [ -e $CWD/$ver.tar.gz ]; then
            CRATE_FILE=$CWD/$ver.tar.gz
        else
            CRATE_FILE=$CWD/$dep-$ver.tar.gz
        fi
    fi
    tar xvf $CRATE_FILE

    touch $dep-$ver/.cargo-ok

    # generate checksum
    {
      printf "{\n"
      printf '    "files": {\n'

      (
        cd $dep-$ver
        find . -type f -print0 | xargs -0 sha256sum | sed -n '/\.cargo-checksum\.json/!p' | sed 's/\.\///;s/^\([^ ]*\)[[:space:]][[:space:]]*\(.*\)$/"\2":"\1",/'
      ) | sed '$ s/,$//'

      printf "    },\n"
      printf '    "package": "'

      sha256sum "$CRATE_FILE" | cut -f1 -d' ' | sed 's/$/"/'

      printf "}\n"
    } | python -c "import sys, json; data = sys.stdin.read(); print json.dumps(json.loads(data), sort_keys=True, indent=4, separators=(',', ' : '))" > $dep-$ver/.cargo-checksum.json
    # Change selected package checksums to null
    if [ "$dep" == "sysfs-class" ] ; then
        sed -i 's/"package" : ".\{64\}"/"package" : null/' $dep-$ver/.cargo-checksum.json
    fi
  done
)

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
libdir=/usr/lib${LIBDIRSUFFIX} \
make
make install DESTDIR=$PKG

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/etc/logrotate.d $PKG/etc/rc.d
install -m 0644 $CWD/config/system76-power.logrotate $PKG/etc/logrotate.d/system76-power.new
install -m 0644 $CWD/config/rc.system76-power $PKG/etc/rc.d/rc.system76-power.new

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a LICENSE README.md $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
