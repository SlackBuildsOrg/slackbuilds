#!/bin/bash

# Slackware build script for balena-etcher-bin

# Copyright 2025 Ioannis Anagnostakis GR
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=balena-etcher-bin
VERSION=${VERSION:-2.1.0}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

SRCNAM64=balenaEtcher-2.1.0-x64
COMPRESS=AppImage


if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

if [ "$ARCH" = "i586" ]; then
  SRCNAM="$SRCNAM32"
elif [ "$ARCH" = "i686" ]; then
  SRCNAM="$SRCNAM32"
elif [ "$ARCH" = "x86_64" ]; then
  SRCNAM="$SRCNAM64"
else
  SRCNAM=
fi

if [ -z "$SRCNAM" ] || [ -z "$COMPRESS" ]; then
  echo "SRCNAM and/or COMPRESS are empty, exiting."
  exit 1
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT


if [[ $COMPRESS = "deb" ]]; then
# extract directly to $PKG/
 ar x "$CWD"/$SRCNAM.$COMPRESS 2>/dev/null || \
 ar x "$CWD"/"$DISPO"."$COMPRESS" 2>/dev/null || \
    { echo "No valid archive found!"; exit 1; }
	rm debian-binary control.tar.*
	tar -xJf data.tar.xz -C "$PKG" 2>/dev/null || \
    tar --use-compress-program=unzstd -xf data.tar.zst -C "$PKG" 2>/dev/null || \
    tar -xzf data.tar.gz -C "$PKG" 2>/dev/null || \
    { echo "No valid archive found!"; exit 1; }
cd "$PKG"
# Everything extracted in $PKG/ and you are in $PKG/ also.
elif
[[ $COMPRESS = "pkg.tar.zst" ]]; then
# extract directly to $PKG/
tar --use-compress-program=unzstd -xf "$CWD"/*.$COMPRESS -C "$PKG" || tar -I unzstd -xf "$CWD"/*.$COMPRESS -C "$PKG" 2>/dev/null || \
    { echo "No valid archive found!"; exit 1; }
cd "$PKG"
# Everything extracted in $PKG/ and you are in $PKG/ also.
elif
 [[ $COMPRESS == "AppImage" ]]; then
 if [ -d "$TMP"/squashfs-root ]; then
    rm -rf "$TMP"/squashfs-root
 fi
 if [ -d "$TMP"/"$PRGNAM-$VERSION" ]; then
    rm -rf "$TMP"/"$PRGNAM-$VERSION"
 fi
  mv "$CWD"/"$SRCNAM"*."$COMPRESS" "$TMP"/"$SRCNAM-$VERSION"."$COMPRESS"
 chmod +x "$TMP"/"$SRCNAM-$VERSION"."$COMPRESS"
 pushd "$TMP" || exit 1
 ./"$SRCNAM-$VERSION"."$COMPRESS" --appimage-extract
 popd || exit 1
 mv "$TMP"/squashfs-root "$TMP"/"$PRGNAM-$VERSION"
 cd "$TMP"/"$PRGNAM-$VERSION"
elif
# extract to $TMP/
 [[ $COMPRESS == "snap" ]]; then
 cd "$TMP"
 unsquashfs -d "$CWD"/"$SRCNAM"."$COMPRESS"
 mv squashfs-root "$PRGNAM-$VERSION"
 cd "$PRGNAM-$VERSION"
elif
 [[ $COMPRESS = "rpm" ]]; then
# extract to $PKG/
 rpm -Kv "$CWD"/"$SRCNAM.$COMPRESS"
 rpm2cpio "$CWD"/"$SRCNAM"."$COMPRESS" > "$TMP"/"$SRCNAM"."$COMPRESS".cpio
 cd "$PKG"
 cpio -idv < "$TMP"/"$SRCNAM"."$COMPRESS".cpio
# Everything extracted in $PKG/ and you are in $PKG/ also.
else
# If you repackage other type of $COMPRESS here you can add commands to extract it...
# You are in $CWD/
echo "COMPRESS is not deb or rpm or snap or AppImage or pkg.tar.zst file"
echo "Add here custom commands for $COMPRESS to proceed binary repackage..."
exit 1
fi

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

rm AppRun balenaEtcher.desktop

mkdir -p $PKG/opt
mkdir -p "$PKG"/usr/doc/$PRGNAM-"$VERSION"
mv ./usr/lib/${PRGNAM%-bin}/LICENSE* "$PKG"/usr/doc/$PRGNAM-"$VERSION"
rm ./usr/lib/balenaEtcher || true
cp -R ./usr/lib/* $PKG/opt
rm -rf ./usr/bin
mkdir -p $PKG/usr/share/icons/hicolor/256x256/apps/
cp -R ./usr/share/icons/hicolor/256x256/* $PKG/usr/share/icons/hicolor/256x256/apps/
chmod 0644 $PKG/usr/share/icons/hicolor/256x256/apps/${PRGNAM%-bin}.png

mkdir -p $PKG/usr/bin
cat $CWD/$PRGNAM.sh > $PKG/usr/bin/${PRGNAM%-bin}
chmod +x $PKG/usr/bin/${PRGNAM%-bin}

mkdir -p $PKG/usr/share/applications
cat << EOF > $PKG/usr/share/applications/${PRGNAM%-bin}.desktop
[Desktop Entry]
Version=1.0
Type=Application
Name=balenaEtcher
Comment=Flash OS images to SD cards & USB drives safely and easily
Exec=balena-etcher %U
Icon=balena-etcher
Terminal=false
Categories=Utility;
StartupNotify=true
EOF
chmod 0644 "$PKG"/usr/share/applications/"${PRGNAM%-bin}".desktop

# Strip binaries and libraries
find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find "$PKG"/ -type f -name "*.so*" -exec chmod 755 {} \;
rm -f "$PKG"/opt/balena-etcher/balenaEtcher || true

cat "$CWD"/$PRGNAM.SlackBuild > $PKG/usr/doc/"$PRGNAM-$VERSION"/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg --remove-tmp-rpaths -l y -c n "$OUTPUT"/"$PRGNAM"-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE"
