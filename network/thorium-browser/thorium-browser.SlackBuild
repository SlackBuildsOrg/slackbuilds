#!/bin/sh

# Copyright 2023  Martin Rodriguez, Guadalajara Mexico
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PKGNAM=thorium-browser

# Allow $ARCH to be preset before running the script.  This is useful in the
# case where someone is running a 32-bit chroot environment under an x86_64
# kernel:
ARCH=${ARCH:-$(uname -m)}

case "$ARCH" in
  x86_64) DEBARCH="amd64" ; LIBDIRSUFFIX="64" ; ARCH=x86_64 ;;
  *) echo "Package for $(uname -m) architecture is not available." ; exit 1 ;;
esac

if [ -z $CAP_EXT ]; then
  cat << EOF

Missing CAP_EXT environment variable. You have to decide between AVX, AVX2 or SSE3.
Consider the following command in order to check if your processor has support
for any of them:

  $ lscpu | egrep --color=always -o 'avx|avx2|sse3'
  avx
  avx2
  $ export CAP_EXT=AVX2  # explort CAP_EXT

Don't forget to download the right .deb package according with the $CAP_EXT
environment variable. Then try running this script again.

EOF
  exit 1
fi

VERSION=${VERSION:-121.0.6167.204_${CAP_EXT}}
BUILD=${BUILD:-1}

if [ ! $UID = 0 ]; then
  cat << EOF

This script must be run as root.

EOF
  exit 1
fi

if ! /bin/ls ${PKGNAM}*.deb 1> /dev/null 2> /dev/null ; then
  cat << EOF

This is a script to repackage a Debian/Ubuntu Google Chrome .deb package
for Slackware.  Run this script in the same directory as one of these
binary packages:

  ${PKGNAM}_${VERSION}.deb  (for 64-bit x86_64)

This will create a Slackware .txz package.  Install it with installpkg
or use upgradepkg to upgrade from a previous version.

EOF
  exit 1
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PKGNAM
OUTPUT=${OUTPUT:-/tmp}

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $PKG
ar p $CWD/${PKGNAM}_${VERSION}.deb data.tar.xz | tar xJv || exit 1
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Make sure top-level perms are correct:
chmod 0755 .
# This needs to be setuid root:
chmod 4711 opt/chromium.org/thorium/chrome-sandbox
# The cron job is for Debian/Ubuntu only:
rm -rf etc

mv $PKG/usr/share/man $PKG/usr/man

# Install a .desktop launcher:
sed -i -e "s#Icon=thorium-browser#Icon=/opt/chromium.org/thorium/product_logo_256.png#" \
  $PKG/usr/share/applications/thorium-browser.desktop

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
mv $PKG/usr/share/doc/$PKGNAM/* $PKG/usr/doc/$PKGNAM-$VERSION
rm -rf $PKG/usr/share/doc
cat $CWD/$PKGNAM.SlackBuild > $PKG/usr/doc/$PKGNAM-$VERSION/$PKGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAM-$VERSION-$ARCH-$BUILD.txz
